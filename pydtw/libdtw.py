# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libdtw')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libdtw')
    _libdtw = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libdtw', [dirname(__file__)])
        except ImportError:
            import _libdtw
            return _libdtw
        if fp is not None:
            try:
                _mod = imp.load_module('_libdtw', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libdtw = swig_import_helper()
    del swig_import_helper
else:
    import _libdtw
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libdtw.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _libdtw.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libdtw.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libdtw.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libdtw.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libdtw.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libdtw.SwigPyIterator_copy(self)

    def next(self):
        return _libdtw.SwigPyIterator_next(self)

    def __next__(self):
        return _libdtw.SwigPyIterator___next__(self)

    def previous(self):
        return _libdtw.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libdtw.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libdtw.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libdtw.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libdtw.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libdtw.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libdtw.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libdtw.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _libdtw.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class TimeSeries(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TimeSeries, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TimeSeries, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libdtw.TimeSeries_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libdtw.TimeSeries___nonzero__(self)

    def __bool__(self):
        return _libdtw.TimeSeries___bool__(self)

    def __len__(self):
        return _libdtw.TimeSeries___len__(self)

    def __getslice__(self, i, j):
        return _libdtw.TimeSeries___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libdtw.TimeSeries___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libdtw.TimeSeries___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libdtw.TimeSeries___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libdtw.TimeSeries___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libdtw.TimeSeries___setitem__(self, *args)

    def pop(self):
        return _libdtw.TimeSeries_pop(self)

    def append(self, x):
        return _libdtw.TimeSeries_append(self, x)

    def empty(self):
        return _libdtw.TimeSeries_empty(self)

    def size(self):
        return _libdtw.TimeSeries_size(self)

    def swap(self, v):
        return _libdtw.TimeSeries_swap(self, v)

    def begin(self):
        return _libdtw.TimeSeries_begin(self)

    def end(self):
        return _libdtw.TimeSeries_end(self)

    def rbegin(self):
        return _libdtw.TimeSeries_rbegin(self)

    def rend(self):
        return _libdtw.TimeSeries_rend(self)

    def clear(self):
        return _libdtw.TimeSeries_clear(self)

    def get_allocator(self):
        return _libdtw.TimeSeries_get_allocator(self)

    def pop_back(self):
        return _libdtw.TimeSeries_pop_back(self)

    def erase(self, *args):
        return _libdtw.TimeSeries_erase(self, *args)

    def __init__(self, *args):
        this = _libdtw.new_TimeSeries(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libdtw.TimeSeries_push_back(self, x)

    def front(self):
        return _libdtw.TimeSeries_front(self)

    def back(self):
        return _libdtw.TimeSeries_back(self)

    def assign(self, n, x):
        return _libdtw.TimeSeries_assign(self, n, x)

    def resize(self, *args):
        return _libdtw.TimeSeries_resize(self, *args)

    def insert(self, *args):
        return _libdtw.TimeSeries_insert(self, *args)

    def reserve(self, n):
        return _libdtw.TimeSeries_reserve(self, n)

    def capacity(self):
        return _libdtw.TimeSeries_capacity(self)
    __swig_destroy__ = _libdtw.delete_TimeSeries
    __del__ = lambda self: None
TimeSeries_swigregister = _libdtw.TimeSeries_swigregister
TimeSeries_swigregister(TimeSeries)

class WarpingNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpingNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WarpingNode, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _libdtw.new_WarpingNode(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _libdtw.WarpingNode_first_set
    __swig_getmethods__["first"] = _libdtw.WarpingNode_first_get
    if _newclass:
        first = _swig_property(_libdtw.WarpingNode_first_get, _libdtw.WarpingNode_first_set)
    __swig_setmethods__["second"] = _libdtw.WarpingNode_second_set
    __swig_getmethods__["second"] = _libdtw.WarpingNode_second_get
    if _newclass:
        second = _swig_property(_libdtw.WarpingNode_second_get, _libdtw.WarpingNode_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _libdtw.delete_WarpingNode
    __del__ = lambda self: None
WarpingNode_swigregister = _libdtw.WarpingNode_swigregister
WarpingNode_swigregister(WarpingNode)

class WarpingPath(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WarpingPath, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WarpingPath, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _libdtw.WarpingPath_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libdtw.WarpingPath___nonzero__(self)

    def __bool__(self):
        return _libdtw.WarpingPath___bool__(self)

    def __len__(self):
        return _libdtw.WarpingPath___len__(self)

    def __getslice__(self, i, j):
        return _libdtw.WarpingPath___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _libdtw.WarpingPath___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _libdtw.WarpingPath___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _libdtw.WarpingPath___delitem__(self, *args)

    def __getitem__(self, *args):
        return _libdtw.WarpingPath___getitem__(self, *args)

    def __setitem__(self, *args):
        return _libdtw.WarpingPath___setitem__(self, *args)

    def pop(self):
        return _libdtw.WarpingPath_pop(self)

    def append(self, x):
        return _libdtw.WarpingPath_append(self, x)

    def empty(self):
        return _libdtw.WarpingPath_empty(self)

    def size(self):
        return _libdtw.WarpingPath_size(self)

    def swap(self, v):
        return _libdtw.WarpingPath_swap(self, v)

    def begin(self):
        return _libdtw.WarpingPath_begin(self)

    def end(self):
        return _libdtw.WarpingPath_end(self)

    def rbegin(self):
        return _libdtw.WarpingPath_rbegin(self)

    def rend(self):
        return _libdtw.WarpingPath_rend(self)

    def clear(self):
        return _libdtw.WarpingPath_clear(self)

    def get_allocator(self):
        return _libdtw.WarpingPath_get_allocator(self)

    def pop_back(self):
        return _libdtw.WarpingPath_pop_back(self)

    def erase(self, *args):
        return _libdtw.WarpingPath_erase(self, *args)

    def __init__(self, *args):
        this = _libdtw.new_WarpingPath(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _libdtw.WarpingPath_push_back(self, x)

    def front(self):
        return _libdtw.WarpingPath_front(self)

    def back(self):
        return _libdtw.WarpingPath_back(self)

    def assign(self, n, x):
        return _libdtw.WarpingPath_assign(self, n, x)

    def resize(self, *args):
        return _libdtw.WarpingPath_resize(self, *args)

    def insert(self, *args):
        return _libdtw.WarpingPath_insert(self, *args)

    def reserve(self, n):
        return _libdtw.WarpingPath_reserve(self, n)

    def capacity(self):
        return _libdtw.WarpingPath_capacity(self)
    __swig_destroy__ = _libdtw.delete_WarpingPath
    __del__ = lambda self: None
WarpingPath_swigregister = _libdtw.WarpingPath_swigregister
WarpingPath_swigregister(WarpingPath)


def dist_euclidean(N, H):
    return _libdtw.dist_euclidean(N, H)
dist_euclidean = _libdtw.dist_euclidean

def dist_manhatten(N, H):
    return _libdtw.dist_manhatten(N, H)
dist_manhatten = _libdtw.dist_manhatten

def dist_dtw(N, H, squared):
    return _libdtw.dist_dtw(N, H, squared)
dist_dtw = _libdtw.dist_dtw

def dist_dtw_backtrace(N, H, path, squared):
    return _libdtw.dist_dtw_backtrace(N, H, path, squared)
dist_dtw_backtrace = _libdtw.dist_dtw_backtrace

def dist_cdtw(N, H, w, squared):
    return _libdtw.dist_cdtw(N, H, w, squared)
dist_cdtw = _libdtw.dist_cdtw

def dist_cdtw_backtrace(N, H, w, path, squared):
    return _libdtw.dist_cdtw_backtrace(N, H, w, path, squared)
dist_cdtw_backtrace = _libdtw.dist_cdtw_backtrace

def lb_envelope(series, w, L, U):
    return _libdtw.lb_envelope(series, w, L, U)
lb_envelope = _libdtw.lb_envelope

def lb_keogh_onQuery(query, subject, w, squared):
    return _libdtw.lb_keogh_onQuery(query, subject, w, squared)
lb_keogh_onQuery = _libdtw.lb_keogh_onQuery

def lb_keogh_onSubject(query, subject, w, squared):
    return _libdtw.lb_keogh_onSubject(query, subject, w, squared)
lb_keogh_onSubject = _libdtw.lb_keogh_onSubject

def lb_keogh_onEnvelope(series, L, U, w, squared):
    return _libdtw.lb_keogh_onEnvelope(series, L, U, w, squared)
lb_keogh_onEnvelope = _libdtw.lb_keogh_onEnvelope
# This file is compatible with both classic and new-style classes.


